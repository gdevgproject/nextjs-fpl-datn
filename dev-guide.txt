MỤC TIÊU:
Hướng dẫn này cung cấp quy ước về cấu trúc dự án, vai trò các thành phần và cách sử dụng tối ưu các công nghệ (Next.js App Router, Supabase, TanStack Query, Server Actions, Context API, TypeScript, Zod, shadcn/ui, TailwindCSS, next-themes) để xây dựng ứng dụng web full-stack mạnh mẽ, hiệu suất cao, dễ bảo trì, đáp ứng schema database phức tạp (schema.txt).

NGUYÊN TẮC CỐT LÕI:
1. Colocation (Đồng vị trí): Giữ code liên quan đến một tính năng (UI, data fetching, mutations, types, context...) cùng một nơi trong thư mục `features/`.
2. Clear Boundaries (Ranh giới rõ ràng): Hiểu rõ code chạy ở đâu (Client/Server Components, Server Actions, API Routes, Middleware) và mục đích từng loại.
3. Leverage Framework Features: Sử dụng Server Components cho data fetching server-side, Server Actions cho mutations, TanStack Query cho quản lý server state phức tạp phía client, Context API cho global client state, API Routes cho endpoint công khai/webhook.
4. Database as Source of Truth & Logic: Tận dụng tối đa Supabase/PostgreSQL (RLS, RPCs, Triggers) để đảm bảo tính toàn vẹn dữ liệu và đóng gói logic nghiệp vụ.

CẤU TRÚC THƯ MỤC CHÍNH:
.
├── app/                     # Routing, Layouts, Pages, API Routes (Core Next.js)
│   ├── (admin)/             # Route group trang quản trị (layout/auth riêng)
│   ├── (auth)/              # Route group xác thực
│   ├── (shop)/              # Route group giao diện khách hàng
│   ├── api/                 # API Routes (Webhooks, OAuth Callbacks)
│   └── layout.tsx           # Root layout
├── components/              # UI Components
│   └── shared/              #   Components tái sử dụng cao, không thuộc feature cụ thể
│       └── ui/              #     Primitives từ shadcn/ui (Button, Input, etc.)
├── features/                # Trung tâm logic nghiệp vụ
│   ├── [feature_name]/      #   Mỗi thư mục là một chức năng (products, cart, auth, orders...)
│   │   ├── components/      #     UI components chỉ dùng cho feature này
│   │   ├── context/         #     (TÙY CHỌN) Context API cho state client của feature (vd: GuestCartContext)
│   │   ├── hooks/           #     TanStack Query hooks (useQuery, useMutation) cho feature
│   │   ├── actions.ts       #     Server Actions cho feature
│   │   ├── services.ts      #     (TÙY CHỌN) Hàm fetch data, logic helper cho feature
│   │   └── types.ts         #     TypeScript types/interfaces/Zod schemas cho feature
│   └── ...
├── lib/                     # Thư viện, tiện ích, cấu hình dùng chung
│   ├── constants.ts         #   Hằng số toàn cục
│   ├── hooks/               #   Custom hooks toàn cục (useToast)
│   ├── providers/           #   Quản lý các Context Providers
│   │   └── providers.tsx    #     Wrapper Provider trung tâm
│   ├── query-client.ts      #   Cấu hình TanStack Query client instance
│   ├── supabase/            #   Supabase clients & middleware helper
│   │   ├── client.ts        #     Client-side (anon key)
│   │   ├── middleware.ts    #     Supabase SSR middleware helper
│   │   ├── server.ts        #     Server-side (anon key)
│   │   └── serviceRoleClient.ts # Server-side (service_role key - DÙNG CẨN THẬN)
│   ├── types/               #   Types dùng chung / được tạo tự động
│   │   └── database.types.ts#     Types từ schema Supabase (quan trọng!)
│   └── utils/               #   Hàm tiện ích toàn cục (format date, currency...)
├── public/                  # Tài nguyên tĩnh
├── styles/                  # Styles toàn cục, Tailwind config
├── middleware.ts            # Root middleware (kiểm tra auth, redirect...)
├── next.config.js
└── tsconfig.json

VAI TRÒ CHI TIẾT CỦA CÁC FILE & CÁCH KẾT HỢP TỐI ƯU:

1. features/[feature]/actions.ts (Server Actions)
   - Mục đích: Xử lý mutations (CUD) và logic nghiệp vụ server-side, kích hoạt bởi UI.
   - Chạy ở đâu: Server (cần 'use server'; ở đầu file).
   - Trách nhiệm:
     - Nhận dữ liệu từ Client Components (qua useMutation).
     - Xác thực & Ủy quyền: Kiểm tra đăng nhập, vai trò (dùng user metadata/bảng profiles). RLS là lớp bảo vệ cuối.
     - Validation Server-side: Validate lại dữ liệu bằng Zod schema (bảo mật).
     - Tương tác Database: Dùng Supabase client server-side (`lib/supabase/server.ts`) cho CUD.
     - Gọi RPCs: Gọi stored procedures phức tạp (`supabase.rpc(...)` như `adjust_stock`, `mergeGuestCartAction`).
     - Xử lý Logic Nghiệp vụ Phức tạp: Kiểm tra tồn kho cuối (có thể dùng transaction/locking), merge giỏ hàng guest, áp dụng mã giảm giá...
     - Tương tác Supabase Storage: Xóa file cũ khi cập nhật/xóa entity (`supabase.storage...remove()`).
     - Revalidation: Gọi `revalidatePath()` hoặc `revalidateTag()` để báo Next.js fetch lại data cho Server Components bị ảnh hưởng.
     - Trả kết quả (thành công/lỗi/dữ liệu) về hook `useMutation`.
   - Kết hợp: Được gọi bởi `mutationFn` trong `hooks.ts`. Dùng `lib/supabase/server.ts`. Có thể gọi hàm trong `services.ts`.
   - Ví dụ: `addToCartAction`, `createOrderAction`, `updateProfileAction`, `approveReviewAction` (admin), `deleteProductAction` (admin), `mergeGuestCartAction`.

2. features/[feature]/hooks.ts
   - Mục đích: Quản lý server state phía client bằng TanStack Query và cung cấp hàm kích hoạt mutations.
   - Chạy ở đâu: Client (vì dùng hooks).
   - Trách nhiệm:
     - Data Fetching (`useQuery`, `useInfiniteQuery`):
       - Định nghĩa hook lấy dữ liệu từ server (vd: `useProductList`, `useCart`, `useCurrentUser`).
       - Cung cấp `queryKey` duy nhất, chính xác (bao gồm dependencies: filters, user ID, page...).
       - Cung cấp `queryFn`: Hàm async fetch dữ liệu (có thể gọi trực tiếp Supabase client-side `lib/supabase/client.ts` hoặc hàm trong `services.ts`).
       - Quản lý trạng thái fetch (isLoading, isSuccess, isError, data, error).
       - Quản lý caching, background updates, refetching (`staleTime`, `cacheTime`, `refetchOnWindowFocus`...).
     - Data Mutation (`useMutation`):
       - Định nghĩa hook thực hiện thay đổi dữ liệu (vd: `useAddToCartMutation`, `useCreateOrderMutation`).
       - Cung cấp `mutationFn`: Hàm async gọi Server Action tương ứng trong `actions.ts`.
       - Quản lý trạng thái mutation (isLoading, isSuccess, isError...).
       - Xử lý Callbacks:
         - `onSuccess`: Quan trọng! Gọi `queryClient.invalidateQueries()` với `queryKey` phù hợp để làm mới data đã fetch (vd: sau khi thêm vào giỏ, invalidate `['cart']`). Có thể dùng `queryClient.setQueryData()` cho optimistic updates. Hiển thị toast thành công.
         - `onError`: Xử lý lỗi, hiển thị toast lỗi.
   - Kết hợp: Dùng `queryClient` từ `lib/query-client.ts`. Gọi hàm trong `services.ts` (`queryFn`) hoặc `actions.ts` (`mutationFn`). Được dùng bởi Client Components hoặc Pages.
   - Tối ưu TanStack Query:
     - Query Keys: Dùng mảng, bắt đầu bằng tên feature/entity, bao gồm *tất cả* tham số ảnh hưởng (ID, filters, page, sort...). Vd: `['products', { category: 'nam', brand: 1 }, 2, 'price_asc']`, `['cart', userId]`, `['currentUser']`.
     - Invalidation: Invalidate chính xác trong `onSuccess` của mutation. Dùng `invalidateQueries({ queryKey: ['entity'] })` hoặc key cụ thể.
     - Refetching: TanStack Query tự động refetch. Cấu hình `staleTime` (thời gian data được coi là mới). `staleTime: Infinity` nếu data ít thay đổi.
     - Prefetching: Dùng `queryClient.prefetchQuery()` để tải trước data (vd: hover link).

3. features/[feature]/services.ts (TÙY CHỌN - Khuyến khích cho Logic Phức tạp)
   - Mục đích: Đóng gói hàm logic cụ thể (fetch data, helper xử lý data) tái sử dụng bởi `hooks.ts` và `actions.ts`.
   - Chạy ở đâu: Client hoặc Server (tùy hàm nào gọi và dùng Supabase client nào).
   - Trách nhiệm:
     - Chứa hàm `async` thực hiện query Supabase phức tạp (join, RPC).
     - Xử lý/định dạng dữ liệu trả về từ Supabase.
     - Đóng gói logic nghiệp vụ nhỏ tái sử dụng.
   - Kết hợp: Được import và gọi bởi `queryFn` trong `hooks.ts` hoặc hàm trong `actions.ts`. Dùng Supabase client phù hợp (client/server).
   - Ví dụ: `fetchFilteredProducts(filters)`, `fetchProductDetails(slug)`, `calculateCartTotals(cartItems)`.

4. features/[feature]/context/... (Context API)
   - Mục đích: Quản lý global client state không liên quan trực tiếp đến server state. KHÔNG DÙNG CHO SERVER STATE.
   - Chạy ở đâu: Client.
   - Trách nhiệm:
     - Định nghĩa Context (`React.createContext`).
     - Tạo Provider component: quản lý state nội bộ (`useState`, `useReducer`), cung cấp state/hàm cập nhật.
     - (Ví dụ Guest Cart): Tương tác với `localStorage`.
   - Kết hợp: Provider đặt ở layout cha (`app/(shop)/layout.tsx`). Component con dùng `useContext`. Hoạt động song song với TanStack Query.
   - Ví dụ: `GuestCartContext` (quản lý giỏ hàng guest trong localStorage). Theme được quản lý bởi `next-themes`.

5. app/api/.../route.ts (API Routes)
   - Mục đích: Tạo HTTP endpoints chuẩn nhận yêu cầu từ bên ngoài.
   - Chạy ở đâu: Server.
   - Trách nhiệm:
     - Xử lý yêu cầu HTTP (GET, POST...).
     - Webhooks: Nhận thông báo từ bên thứ ba (Momo, Stripe...). Cần xác thực chữ ký webhook. Vai trò chính trong dự án.
     - OAuth Callbacks: Xử lý redirect từ nhà cung cấp OAuth, gọi `exchangeCodeForSession` server-side.
     - API công khai (Nếu cần).
     - Tương tác Supabase (thường dùng client server-side, có thể dùng service role nếu cần bỏ qua RLS cho webhook/tác vụ hệ thống).
   - Kết hợp: Được gọi từ bên ngoài qua HTTP. Độc lập với Server Actions và client hooks.
   - Ví dụ: `app/api/webhooks/momo/route.ts`, `app/api/auth/callback/route.ts`.

6. lib/ (Thư viện và Tiện ích)
   - Mục đích: Chứa code nền tảng, cấu hình, tiện ích dùng chung, không thuộc feature.
   - `lib/supabase/`: Quản lý các Supabase client (`client`, `server`, `serviceRoleClient`) và middleware helper (`@supabase/ssr`). Quan trọng để tương tác đúng ngữ cảnh.
   - `lib/providers/providers.tsx`: Tập trung wrap global providers (QueryClientProvider, GuestCartProvider, NextThemesProvider).
   - `lib/query-client.ts`: Khởi tạo instance `QueryClient`.
   - `lib/hooks/`: Hooks dùng chung (vd: `use-sonner-toast.tsx`).
   - `lib/types/database.types.ts`: Types tự động từ schema Supabase (quan trọng cho type safety).
   - `lib/utils/`: Hàm tiện ích nhỏ, tái sử dụng cao.
   - `lib/constants.ts`: Hằng số.

QUẢN LÝ STATE: SERVER vs. CLIENT
- Server State: Dữ liệu trên server (Supabase DB: sản phẩm, đơn hàng, cart logged-in, profile).
  - Công cụ quản lý chính: TanStack Query (`features/[feature]/hooks.ts`).
  - Lợi ích: Caching, auto refetching, xử lý loading/error, đồng bộ client-server.
- Client State: Dữ liệu chỉ tồn tại phía client (tạm thời/UI state: cart guest, trạng thái modal, theme).
  - Công cụ quản lý chính: Context API (cho global state đơn giản như Guest Cart), `useState`/`useReducer` (local state), `next-themes` (theme).
  - Lưu ý: KHÔNG dùng TanStack Query cho client state thuần túy.

VALIDATION VỚI ZOD & REACT HOOK FORM
- Zod Schemas: Định nghĩa trong `features/[feature]/types.ts` (hoặc file riêng) mô tả cấu trúc, ràng buộc data.
- Client-side Validation: Dùng `react-hook-form` + `@hookform/resolvers/zod` trong Client Components để validate form *trước khi* gọi action. Phản hồi người dùng tức thì.
- Server-side Validation: BẮT BUỘC! Trong Server Actions (`actions.ts`), dùng lại Zod schema để parse/validate data nhận từ client *trước khi* ghi vào DB. Lớp bảo mật quan trọng.

UI & STYLING (shadcn/ui, Tailwind, next-themes)
- shadcn/ui: Dùng primitives (Button, Input, Card...) làm nền tảng (`components/shared/ui/`), tùy chỉnh/kết hợp trong `components/shared/` hoặc `features/[feature]/components/`.
- TailwindCSS: Styling trực tiếp trên components. Config trong `tailwind.config.js`.
- next-themes: Quản lý theme sáng/tối. Provider (`ThemeProvider`) trong `lib/providers/providers.tsx`. Dùng hook `useTheme` để chuyển đổi/style có điều kiện.

XỬ LÝ CÁC KỊCH BẢN PHỨC TẠP (TÓM TẮT)
- Guest vs. Logged-in Cart & Merge: Context API (localStorage) cho guest, TanStack Query (DB) cho logged-in. Server Action `mergeGuestCartAction` xử lý merge khi đăng nhập.
- Check Tồn kho khi Checkout: Thực hiện trong Server Action `createOrderAction`, lý tưởng trong transaction DB (có thể dùng `SELECT...FOR UPDATE` để khóa).
- Role Management & Authorization: Kết hợp kiểm tra role (Server Actions/Middleware/Server Components) với RLS mạnh mẽ ở database.
- Supabase Storage (Ảnh): Upload từ client (dùng client-side client), cập nhật URL vào DB qua Server Action. Xóa file cũ từ Server Action (dùng server-side client).

KẾT LUẬN:
Cấu trúc và cách tiếp cận này cung cấp nền tảng vững chắc, có tổ chức, khả năng mở rộng. Tuân thủ vai trò các file và tận dụng đúng công nghệ giúp phát triển hiệu quả, tạo sản phẩm chất lượng, hiệu suất tốt. Ưu tiên sự rõ ràng, bảo mật (validation server-side, RLS) và trải nghiệm người dùng.

Lệnh chạy ngrok: ngrok http 3000